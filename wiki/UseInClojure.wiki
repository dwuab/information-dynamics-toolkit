#summary How to use the toolkit in Clojure
#labels clojure

= Introduction =

The Java code from this toolkit can easily be used in Clojure -- the project jar has been deployed to maven as [https://clojars.org/me.lizier/jidt me.lizier/jidt] for automated inclusion in clojure projects (see further details below).

Here we give only a brief overview of calling Java code from [http://clojure.org/ Clojure]; several longer examples of using the JIDT toolkit in Clojure can be viewed at [Clojure_Examples].

= Using Java objects in Clojure =

No special installations are required to begin using Java objects in Clojure, these are supported natively as described [http://clojure.org/java_interop here].

You can run your Java code in Clojure as follows:
 # Add the `[me.lizier/jidt "LATEST"]` for the latest version (or name a specific version) to the `:dependencies` vector of your `project.clj` file (this automatically references the JIDT jar from the leiningen repository and pulls it in). See our sample [http://code.google.com/p/information-dynamics-toolkit/source/browse/#svn%2Ftrunk%2Fdemos%2Fclojure%2Fexamples%2Fproject.clj project.clj] file in our [Clojure_Examples].
 # Import the classes you wish to use, e.g. `(import infodynamics.measures.discrete.TransferEntropyCalculatorDiscrete)`.
 # Create an instance of the calculator you wish to use, e.g. `(def teCalc (TransferEntropyCalculatorDiscrete. 2 1))`
 # Call methods on the object, e.g. `(.addObservations teCalc sourceArray destArray)`.

*Array conversion* -- I need to look into this ...


= Acknowledgements =

A big thank you to Matthew Chadwick for showing me how to do this and getting things up and running with clojure and leiningen.