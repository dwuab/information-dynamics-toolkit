#summary How to use the toolkit in Octave or Matlab
#labels octave,matlab,Phase-Deploy

= Introduction =

The java code from this toolkit can easily be used in Octave or Matlab. This page contains basic information on how to get up and running with the toolkit:
  * [#Use_in_Matlab Matlab] instructions
  * [#Use_in_Octave Octave] instructions

Several longer examples of using the toolkit in Octave/Matlab can be viewed at LongerOctaveMatlabExamples.

= Use in Matlab =

The ability to use Java from within Matlab comes with Matlab out of the box. Full info is available at:
  * http://www.mathworks.com.au/help/techdoc/matlab_external/f44062.html

You can run your Java code inside Matlab fairly simply:
  # Tell Matlab about your jar, e.g.: `javaaddpath('../Information Dynamics/infoDynamics.jar');`
  # Create an instance of a class, e.g. by direct instantiation `miCalc = infodynamics.measures.continuous.kernel.MutualInfoCalculatorMultiVariateWithDiscreteKernel();` or using `miCalc = javaObjectEDT('infodynamics.measures.continuous.kernel.MutualInfoCalculatorMultiVariateWithDiscreteKernel')`
  # Use the object: `miCalc.initialise(4, 2, 0.5);`

For _static_ methods, note that you can simply call it on the class itself, or on  an object of the class - see http://www.mathworks.com.au/help/techdoc/matlab_external/f46719.html#f23705

See longer code examples at LongerOctaveMatlabExamples.

= Use in Octave =

Here I will describe material I found useful to get started with Java inside Octave, then how I installed octave-java, then how to run the code.

Material that I found useful regarding using Java code inside Octave:
  * http://sourceforge.net/mailarchive/forum.php?thread_name=128f38bd0911170856i2d9dc349x28e02b3fe3333011%40mail.gmail.com&forum_name=octave-dev
  * http://octave.1599824.n4.nabble.com/How-do-I-install-the-java-and-jhandles-packages-td1632116.html
  * http://www.octave.org/wiki/index.php?title=Java_package

Here is a list of how I got octave-java installed:
  # Set-up steps::
    # Set up an environment variable for JAVA_HOME - for me `/usr/lib/jvm/java-6-openjdk-amd64`
    # Make sure that `$JAVA_HOME/jre/lib/<ARCH>/client/libjvm.so` exists - on 64-bit machines, the required file exists in `server` directory, not `client`. We can get around this by adding a symlink - I created the directory `client` and symlink from inside the `client` directory to the file in the `server` directory.
  # Install [http://octave.sourceforge.net/java/ octave-java] from the [http://octave.sourceforge.net/ Octave-forge project] either:
    # through your linux package manager (this didn't work properly for me on ubuntu 12.04), or
    # via directly downloading the `.tar.gz` file from http://octave.sourceforge.net/java/ then starting octave in root mode (`sudo octave`), and inside octave run the installation, e.g.: `pkg install -verbose java-1.2.8.tar.gz`. To uninstall at a later date, you can run: `pkg uninstall java`. After running the installation in root mode, you will need to add read access for yourself to the `doc.info` file for running the `doc java` command.

Once all that is set up, you can run your java code just as simply as in Matlab:
  # Tell octave-java about your jar, e.g.: `javaaddpath('../Information Dynamics/infoDynamics.jar');`
  # Create an instance of a class, e.g.: `miCalc = javaObject("infodynamics.measures.continuous.kernel.MutualInfoCalculatorMultiVariateWithDiscreteKernel");`
  # Use the object: `miCalc.initialise(4, 2, 0.5);`

For _static_ methods, you can call them on an object of the class itself, or using the javaMethod function - http://octave.sourceforge.net/java/function/javaMethod.html

See longer code examples at LongerOctaveMatlabExamples.

= Longer examples =

These examples are designed for Octave, but to run the following in Matlab, convert the `javaObject()` calls to `javaObjectEDT()` and they *should* work, though I haven't tested them.

== Example 1 - Transfer entropy on binary data ==

Simple transfer entropy (TE) calculation on binary data using the discrete TE calculator:

{{{
javaaddpath('infoDynamics.jar');

% Generate some random binary data.
% Note that we need the *1 to make this a number not a Boolean,
%  otherwise this will not work (as it cannot match the method signature)
sourceArray=(rand(100,1)>0.5)*1; 
destArray = [0; sourceArray(1:99)];
sourceArray2=(rand(100,1)>0.5)*1;
% Create a TE calculator and run it:
teCalc=javaObject('infodynamics.measures.discrete.ApparentTransferEntropyCalculator', 2, 1);
teCalc.initialise();
teCalc.addObservations(destArray, sourceArray);
% For copied source, should give something close to 1 bit:
result = teCalc.computeAverageLocalOfObservations()
teCalc.initialise();
teCalc.addObservations(destArray, sourceArray2);
% For random source, it should give something close to 0 bits
result2 = teCalc.computeAverageLocalOfObservations()
}}}

== Example 2 - Transfer entropy on multidimensional binary data ==

Simple transfer entropy (TE) calculation on multidimensional binary data using the discrete TE calculator.

This example is important for Octave users, because it shows how to handle multidimensional arrays from Octave to Java (this is not as simple as single dimensional arrays in example 1 - it requires assigning every element individually, and creating a double[][] array first and then converting to int[][]).

{{{
javaaddpath('infoDynamics.jar');

% Things get a little tricky if we want to pass 2D arrays in.
% Unlike native Octave 1D arrays above, 
%  native Octave 2D+ arrays do not seem to get directly converted to java arrays,
%  so we need to copy every part of the array individually:
numColumns = 100;
twoDTimeSeries = javaArray('java.lang.Double',2,numColumns);
for c = 1:numColumns
    twoDTimeSeries(1,c) = (rand()>0.5)*1;
end
for c = 1:numColumns
    % Copy the value of the source to the left from the previous time step
    twoDTimeSeries(2,c) = twoDTimeSeries(1,mod(c-2,numColumns)+1);
end
% Assigning native Octave values directly to a java.lang.Integer array does not
%  work either, so we created a Double array above, and then convert it to 
%  an int array here:
mUtils = javaObject('infodynamics.utils.MatrixUtils');
twoDTimeSeries = mUtils.doubleToIntArray(twoDTimeSeries);
teCalc.initialise();
teCalc.addObservations(twoDTimeSeries, 1);
% The result should be close to 1 bit here, since we are executing copy operations 
%  of what is effectively a random bit to each cell here:
result2D = teCalc.computeAverageLocalOfObservations()
}}}

== Example 3 - Transfer entropy on continuous data using Kraskov estimators ==

Simple transfer entropy (TE) calculation on continuous-valued data using the Kraskov-estimator TE calculator.

{{{
javaaddpath('infoDynamics.jar');

% Generate some random normalised data.
numObservations = 1000;
covariance=0.4;
sourceArray=normrnd(0, 1, numObservations, 1);
destArray = [0; covariance*sourceArray(1:numObservations-1) + (1-covariance)*normrnd(0, 1, numObservations - 1, 1)];
sourceArray2=normrnd(0, 1, numObservations, 1); % Uncorrelated source
% Create a TE calculator and run it:
teCalc=javaObject('infodynamics.measures.continuous.kraskov.TransferEntropyCalculatorKraskov');
teCalc.initialise(1); % Use history length 1 (Schreiber k=1)
teCalc.setProperty("k", "4"); % Use Kraskov parameter K=4 for 4 nearest points
% Perform calculation with correlated source:
teCalc.setObservations(sourceArray, destArray);
result = teCalc.computeAverageLocalOfObservations();
% Note that the calculation is a random variable (because the generated
%  data is a set of random variables) - the result will be of the order
%  of what we expect, but not exactly equal to it; in fact, there will
%  be a large variance around it.
printf("TE result %.4f nats; expected to be close to %.4f nats for these correlated Gaussians\n", \
    result, log(1/(1-covariance^2)));
% Perform calculation with uncorrelated source:
teCalc.initialise(); % Initialise leaving the parameters the same
teCalc.setObservations(sourceArray2, destArray);
result2 = teCalc.computeAverageLocalOfObservations();
printf("TE result %.4f nats; expected to be close to 0 nats for these uncorrelated Gaussians\n", result2);
}}}