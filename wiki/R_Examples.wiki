#summary Examples of using the toolkit in R
#labels R,examples

[Demos] > R code examples

= R code examples =

This page describes a basic set of demonstration scripts for using the toolkit in R. The .r files can be found at [http://code.google.com/p/information-dynamics-toolkit/source/browse/#svn%2Ftrunk%2Fdemos%2Fr demos/r] in the svn or main distributions (from V1.1 release).

Please see [UseInR] for instructions on how to begin using the java toolkit from inside R.

Note that these examples use the [http://www.rforge.net/rJava/ rJava] R library -- you will need to alter them if you want to use another R-Java interface (though I believe this is the standard one).

This page contains the following code examples:
  * [#Example_1_-_Transfer_entropy_on_binary_data Example 1 - Transfer entropy on binary data]

= Example 1 - Transfer entropy on binary data =

[http://code.google.com/p/information-dynamics-toolkit/source/browse/trunk/demos/r/example1TeBinaryData.r example1TeBinaryData.r] - Simple transfer entropy (TE) calculation on binary data using the discrete TE calculator:

{{{
# Load the rJava library and start the JVM
library("rJava")
.jinit()

# Change location of jar to match yours:
#  IMPORTANT -- If using the default below, make sure you have set the working directory
#   in R (e.g. with setwd()) to the location of this file (i.e. demos/r) !!
#  Otherwise you will need to supply an absolute path here
.jaddClassPath("../../infodynamics.jar")

# Generate some random binary data:
sourceArray<-sample(0:1, 100, replace="TRUE")
destArray<-c(0L, sourceArray[1:99]); # Need 0L to keep as integer array
sourceArray2<-sample(0:1, 100, replace="TRUE")

# Create a TE calculator and run it:
teCalc<-.jnew("infodynamics/measures/discrete/TransferEntropyCalculatorDiscrete", 2L, 1L)
.jcall(teCalc,"V","initialise") # V for void return value
# Since we have simple arrays of ints, we can directly pass these in:
.jcall(teCalc,"V","addObservations",sourceArray, destArray)

print("For copied source, result should be close to 1 bit : ")
.jcall(teCalc,"D","computeAverageLocalOfObservations")

# Now look at the unrelated source:
.jcall(teCalc,"V","initialise") # V for void return value
.jcall(teCalc,"V","addObservations",sourceArray2, destArray)
print("For random source, result should be close to 0 bits: ")
.jcall(teCalc,"D","computeAverageLocalOfObservations")
}}}